{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f573c56-5610-495a-9ebb-67cb5709f486",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xarray as xr\n",
    "import os\n",
    "\n",
    "def inspect_nc_files(directory_path):\n",
    "    \"\"\"\n",
    "    Open and print the contents of each NetCDF file within a directory, including data variables, dimensions, and global attributes.\n",
    "    \n",
    "    Args:\n",
    "    directory_path (str): Path to the directory containing NetCDF files.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        # List all files in the given directory\n",
    "        files = [f for f in os.listdir(directory_path) if f.endswith('.nc')]\n",
    "        print(f\"Found {len(files)} NetCDF files in directory {directory_path}.\")\n",
    "        \n",
    "        for file in files:\n",
    "            file_path = os.path.join(directory_path, file)\n",
    "            print(f\"\\nInspecting {file_path}...\")\n",
    "            \n",
    "            with xr.open_dataset(file_path) as ds:\n",
    "                print(\"\\nDimensions:\")\n",
    "                print(ds.dims)\n",
    "                \n",
    "                print(\"\\nData Variables:\")\n",
    "                for var in ds.data_vars:\n",
    "                    print(f\"{var}: {ds[var].attrs}\")\n",
    "                \n",
    "                print(\"\\nCoordinates:\")\n",
    "                for coord in ds.coords:\n",
    "                    print(f\"{coord}: {ds[coord].attrs}\")\n",
    "    \n",
    "                print(\"\\nAttributes:\")\n",
    "                print(ds.attrs)\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Failed to access {directory_path}: {str(e)}\")\n",
    "\n",
    "def main():\n",
    "    directory_path = r\"C:\\Users\\cbeau\\S3B_OL_1_EFR____20180514T235623_20180514T235910_20200125T210514_0166_003_130_1260_MR1_R_NT_002.SEN3\"\n",
    "    inspect_nc_files(directory_path)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "19acb147",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cbeau\\anaconda3\\python.exe\n",
      "Processing complete. Output files saved to: C:\\Users\\cbeau\\Downloads\\UNCW\\Albermarle Sound Algae\\txt\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "print(sys.executable)\n",
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "from pyproj import Proj, transform\n",
    "import rasterio\n",
    "import os\n",
    "import pandas as pd\n",
    "from pyproj import Proj, transform\n",
    "from rasterio.plot import show\n",
    "from datetime import datetime\n",
    "import glob\n",
    "\n",
    "################################################################################################################\n",
    "#####################     GEOTIFF to TXT, PYTHON translations of R code     ##############################################\n",
    "\n",
    "import os\n",
    "import glob\n",
    "import rasterio\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pyproj import Transformer\n",
    "\n",
    "# Paths setup\n",
    "archivePath = r\"C:\\Users\\cbeau\\Downloads\\UNCW\\Albermarle Sound Algae\"\n",
    "txtPath = r\"C:\\Users\\cbeau\\Downloads\\UNCW\\Albermarle Sound Algae\\txt\"\n",
    "plotPath = r\"C:\\Users\\cbeau\\Downloads\\UNCW\\Albermarle Sound Algae\\Plot\"\n",
    "\n",
    "# Ensure the txtPath and plotPath directories exist\n",
    "os.makedirs(txtPath, exist_ok=True)\n",
    "os.makedirs(plotPath, exist_ok=True)\n",
    "\n",
    "# Find all GeoTIFF files\n",
    "imageFiles = glob.glob(os.path.join(archivePath, \"*CIcyano*.tif\"))\n",
    "\n",
    "# Process each file\n",
    "for file_path in imageFiles:\n",
    "    try:\n",
    "        with rasterio.open(file_path) as src:\n",
    "            # Read the data\n",
    "            array_data = src.read(1)  # Read the first band only\n",
    "            transformer = Transformer.from_crs(src.crs, 'EPSG:4326', always_xy=True)\n",
    "\n",
    "            # Initialize a list to store data\n",
    "            data_list = []\n",
    "\n",
    "            # Loop through each index that has data (ignore NODATA)\n",
    "            for row in range(array_data.shape[0]):\n",
    "                for col in range(array_data.shape[1]):\n",
    "                    value = array_data[row, col]\n",
    "                    if value != src.nodata:  # Check against src.nodata if defined\n",
    "                        x, y = src.xy(row, col)  # Get the x, y coordinates of the cell\n",
    "                        lon, lat = transformer.transform(x, y)  # Transform to lon/lat\n",
    "                        data_list.append({'X': x, 'Y': y, 'lon': lon, 'lat': lat, 'ci': value})\n",
    "\n",
    "            # Convert the list of data to a DataFrame\n",
    "            df = pd.DataFrame(data_list)\n",
    "            \n",
    "            # Save to CSV, using the name of the GeoTIFF file with a new extension\n",
    "            output_filename = os.path.basename(file_path).replace('.tif', '.csv')\n",
    "            df.to_csv(os.path.join(txtPath, output_filename), index=False)\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred with file: {file_path}\")\n",
    "        print(f\"Error message: {e}\")\n",
    "        continue\n",
    "\n",
    "print(\"Processing complete. Output files saved to:\", txtPath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65bbdd8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xarray as xr\n",
    "import numpy as np\n",
    "import os\n",
    "import glob\n",
    "\n",
    "def calculate_rrs(file_path, output_dir, params):\n",
    "    \"\"\"\n",
    "    Calculate Rrs using atmospheric corrections and the four-band algorithm from OLCI imagery.\n",
    "    \n",
    "    Args:\n",
    "    file_path (str): Path to the input NetCDF file.\n",
    "    output_dir (str): Directory to save the output NetCDF files.\n",
    "    params (dict): Dictionary containing parameters like solar zenith angle, mean solar flux, etc.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        ds = xr.open_dataset(file_path)\n",
    "\n",
    "        # Constants and parameters\n",
    "        pi = np.pi\n",
    "        theta = params['solar_zenith']  # Solar zenith angle in degrees\n",
    "        cos_theta = np.cos(np.deg2rad(theta))\n",
    "\n",
    "        # Mean solar flux for each band\n",
    "        F0 = params['mean_solar_flux']  # Dictionary of mean solar flux values for each band\n",
    "\n",
    "        # Gaseous transmittance (assumed provided)\n",
    "        tgsol = params['tgsol']  # Sun to surface\n",
    "        tgsen = params['tgsen']  # Surface to sun\n",
    "\n",
    "        # Bands wavelengths\n",
    "        wavelengths = [560, 665, 709, 754]  # Example wavelengths\n",
    "\n",
    "        Rrc = {}\n",
    "        for wl in wavelengths:\n",
    "            # Equation (8) implementation\n",
    "            L_t = ds[f'L_t_{wl}']\n",
    "            L_r = ds[f'L_r_{wl}']\n",
    "            TLg = ds[f'TLg_{wl}']\n",
    "\n",
    "            Rrc[wl] = (pi / F0[wl] / cos_theta) * (L_t / tgsol[wl] / tgsen[wl] - L_r - TLg)\n",
    "\n",
    "        # Convert dictionary to xarray Dataset\n",
    "        rrc_ds = xr.Dataset({f'Rrc_{wl}': Rrc[wl] for wl in wavelengths})\n",
    "\n",
    "        # Implementing the Four Band Algorithm (FBA)\n",
    "        Rrs_665 = rrc_ds['Rrc_665']\n",
    "        Rrs_560 = rrc_ds['Rrc_560']\n",
    "        Rrs_709 = rrc_ds['Rrc_709']\n",
    "        Rrs_754 = rrc_ds['Rrc_754']\n",
    "\n",
    "        FBA = (1 / (Rrs_665 - 0.17 * Rrs_560 - 0.83 * Rrs_709)) * Rrs_754\n",
    "        \n",
    "        # Save FBA to the dataset\n",
    "        rrc_ds['FBA'] = FBA\n",
    "\n",
    "        # Define output path\n",
    "        output_path = os.path.join(output_dir, os.path.basename(file_path).replace('.nc', '_Rrs.nc'))\n",
    "        \n",
    "        # Save to NetCDF\n",
    "        rrc_ds.to_netcdf(output_path)\n",
    "        print(f\"Processed and saved: {output_path}\")\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Failed to process {file_path}: {str(e)}\")\n",
    "\n",
    "def main():\n",
    "    input_directory = 'path_to_nc_files'\n",
    "    output_directory = 'path_to_output_files'\n",
    "\n",
    "    # Parameters (example values, these need to be provided accurately)\n",
    "    params = {\n",
    "        'solar_zenith': 40,  # in degrees\n",
    "        'mean_solar_flux': {560: 1941, 665: 1862, 709: 1595, 754: 1274},  # mean solar flux for each band\n",
    "        'tgsol': {560: 0.9, 665: 0.85, 709: 0.8, 754: 0.75},\n",
    "        'tgsen': {560: 0.9, 665: 0.85, 709: 0.8, 754: 0.75}\n",
    "    }\n",
    "\n",
    "    if not os.path.exists(output_directory):\n",
    "        os.makedirs(output_directory)\n",
    "\n",
    "    nc_files = glob.glob(os.path.join(input_directory, '*.nc'))\n",
    "    for file in nc_files:\n",
    "        calculate_rrs(file, output_directory, params)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
